1. WebDriver
WebDriver is an important API in selenium
We use WebDriver to create driver object(chrome driver, safari, edge, firefox, headless,..)
2. Job title
-QA Engineer, Quality Assurance, SDET, …..
-If there is Selenium keyword in job description, you can apply
3. Framework
It is a combination of packages, classes, methods to keep our codes organized.
4. Manual vs Automation
Automation is simply done for keeping the test step stable and execution test cases faster
5. Advantages & Disadvantages
Selenium is number 1 WEB APPLICATION TESTING TOOL, open source, has large user base, works with multiple browsers, and languages
Cannot automate mobile and desktop applications with out 3rd party tools such as Appium and Auto IT, cannot handle captcha, no professional customer support
6. Functional & Non Functional Testing
Functionality is the answer of what should be done(button click, search, check out,…), non - functional is the answer of how should be done(performance, security,…)
7. Testing Types
Static: done without code such as document review
Dynamic(non-static): done with some type of coding(functional and non functional)
8. Selenium Architecture
W3C protocolk
There is request and response between client side (selenium binding) and server side(drivers)
9. Selenium framework installation
We need to be organized to create a framework
We use dependencies in MAVEN project to add selenium, WebDriver, junit, testNG, cucumber,….

----------------------------------------------------------------------
Absolute xpath
/ used
You cannot skip a child to go to the next
element
You have to go to child element one by one from
parent to child
You cannot go to a certain element easily if the
html is longer
Absolute xpath is not recommended to use
because it can easily be broken when a new
element is added on the page


Relative xpath
// is used
You can skip a child to go to the next element
You can go to a certain element easily if the
html is longer
Relative xpath is recommended to use
because there are multiple ways to write
dynamic xpath


----------------------------------------------------------------------
Webdriver driver;
1-      Xpath;           driver.findElement(By.xpath (“//tag[@attribute name= ‘value’]”)); --
	                   driver.findElement(By.xpath (“ //tag [contains/starts-with/ends-with(@attribute,’value’)]”));
2-      İd:                 driver. findElement(By.id(“box1”));
3-      Name:          driver.findElement(By.name(“checkbox1”));
4-       cssSelector: driver.findElement (By.cssSelector (“tag[attribute = ‘value’]);
5-       Link:              driver.findElement (By.linkText (“logout”));
6-      tagName :    driver.findElement (By.tagName(“button”));
7-      className:   driver.findElement (By.className(“oxd-button oxd-button”));
8-      PartialLink:   driver.findElement (By.partialLinkText(“oxd-bu”));



--------------------------------------------------------------------------

Css is a little faster and better
xpath navigates through the DOM(html code on the browser. Document object
model), cssSelector locates the target without navigation
Xpath is more common. We can write dynamic xpath to locate element
Xpath is easier to use with index
They have different syntax. For example, // is used in xpath but not in css
Css locators usually same on different the browsers, so it is more reliable.


--------------------------------------------------------------------------------


//WAITS
/*
  HARD WAIT
  Thread.sleap(3000)

  IMPLICIT WAIT
= implicit wait is used once, whenever we call the driver,
  implicit wait applies automatically, so implicit wait is global wait

   EXPLICIT WAIT
= it is local wait, we will apply the wait on the specific elements
  WebDriverWait object

   FLUENT WAIT
=  it is a type of explicit wait
   we can ignore exception
   we can put polling number = for example each 3 second try to handle
 */